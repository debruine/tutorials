[
["index.html", "Tutorials Overview", " Tutorials Lisa DeBruine 2019-03-26 Overview I'm going to move all of my code tutorials here eventually. "],
["packages.html", "Chapter 1 Your first R package with unit tests 1.1 Learning Objectives 1.2 Setting Up 1.3 Create your R package 1.4 Creating a function 1.5 Build your package 1.6 Error checking 1.7 Unit tests 1.8 Share your package 1.9 Further resources", " Chapter 1 Your first R package with unit tests 1.1 Learning Objectives Create an R package Create a function Document the function Include error checking in the function Write unit tests for the function Use your package in a script Share your package through GitHub 1.2 Setting Up You will need to install the following packages: install.packages(c(&quot;devtools&quot;, &quot;roxygen2&quot;, &quot;testthat&quot;, &quot;usethis&quot;, &quot;knitr&quot;)) 1.3 Create your R package Use the following command to create the framework for a new package called demopckg. Set the argment to the path where you want to save your package. The last section of the path should be the name of the package. usethis::create_package(&quot;~/rstuff/demopckg&quot;) Package names can only be letters, numbers, and full stops. You'll see the following output, and a new RStudio project will open up. You can close the old window now and just work in this project. ✔ Setting active project to &#39;~/rstuff/demopckg&#39; ✔ Creating &#39;R/&#39; ✔ Creating &#39;man/&#39; ✔ Writing &#39;DESCRIPTION&#39; ✔ Writing &#39;NAMESPACE&#39; ✔ Writing &#39;demopckg.Rproj&#39; ✔ Adding &#39;.Rproj.user&#39; to &#39;.gitignore&#39; ✔ Adding &#39;^demopckg\\\\.Rproj$&#39;, &#39;^\\\\.Rproj\\\\.user$&#39; to &#39;.Rbuildignore&#39; ✔ Opening new project &#39;demopckg&#39; in RStudio 1.3.1 Edit the DESCRIPTION file Open the DESCRIPTION file. It should look like this: Package: demopckg Title: What the Package Does (One Line, Title Case) Version: 0.0.0.9000 Authors@R: person(given = &quot;First&quot;, family = &quot;Last&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), email = &quot;first.last@example.com&quot;) Description: What the package does (one paragraph). License: What license it uses Encoding: UTF-8 LazyData: true Change the title, authors, and description to your own information. 1.3.2 Create a LICENSE Add a license using one of the following options: usethis::use_mit_license(name = &quot;YOUR NAME&quot;) # permissive sharing usethis::use_cc0_license(name = &quot;YOUR NAME&quot;) # public domain - use for data packages usethis::use_gpl3_license(name = &quot;YOUR NAME&quot;) # derivatives must be open 1.3.3 Create a README Use the following code to set up a README document that will explain your package. usethis::use_readme_rmd() We'll eventually put this on github, so change the installation instructions to the following (change yourusername to your github username). You can install the released version of demopckg from [GitHub](https://github.com) with: &#96;&#96;&#96; r devtools::install_github(\"yourusername/demopckg\") &#96;&#96;&#96; Delete the example for now. Make sure you knit your README.Rmd file when you update it and never edit the README.md file (that's just for github). 1.4 Creating a function Function definitions are saved in the R folder. You don't have to, but I like to save each function in its own file and name the file after the function. 1.4.1 Template function Create a new R script from the File menu (New File &gt; R Script). Paste the following template into your file: #&#39; My function #&#39; #&#39; `myfunction` does something. #&#39; #&#39; @param arg1 A value to return #&#39; @return Returns the value of \\code{arg1} #&#39; @examples #&#39; #&#39; myfunction(1) # returns 1 #&#39; #&#39; @export myfunction &lt;- function(arg1 = &quot;Change me&quot;) { arg1 } 1.4.2 Edit the function We're going to create a function that reports a p-value in APA style, named report_p. It will take two arguments, the p-value (p) and the number of digits to round to (digits). Replace myfunction with report_p and change the arguments. Should p have a default value? Should digits? The first thing we should do in the function is check whether p is less than 0.001, and if it is, return the value &quot;p &lt; .001&quot;. report_p &lt;- function(p, digits = 3) { if (p &lt; .001) return(&quot;p &lt; .001&quot;) } Once you run the return() function, your function stops running. If p is greater than 0.001, then we should round it to the specified number of digits, paste it after the string &quot;p = &quot;, and return it. report_p &lt;- function(p, digits = 3) { if (p &lt; .001) return(&quot;p &lt; .001&quot;) round_p &lt;- round(p, digits) p_string &lt;- paste(&quot;p =&quot;, p_round) return(p_string) } Run your function and test it with a few different p-values and digits. Try report_p(0.01034). Does this look exactly like you expect? APA style omits the leading zero and pads the number out to three digits. We can do this by converting our rounded p-value into a character string, replacing the string &quot;0.&quot; with &quot;.&quot;, and making sure to pad the right side with enough zeros. The stringr package has useful functions for this. When you use R functions from a package (not base R), you normally load the package using the library() function. When you're developing your own package, you need to preface every function with its package name and two colons instead, so in the code below we'll use stringr::str_replace() and stringr::str_pad(), not str_replace() and str_pad(). One function you can't preface with the package name is the pipe. While you're testing your function, load the pipe by typing library(magrittr) in the console. report_p &lt;- function(p, digits = 3) { if (p &lt; .001) return(&quot;p &lt; .001&quot;) p_round &lt;- round(p, digits) %&gt;% as.character() %&gt;% # omit leading zero for APA-style stringr::str_replace(&quot;0.&quot;, &quot;.&quot;) %&gt;% # pad right with zeros stringr::str_pad(digits+1, &quot;right&quot;, 0) p_string &lt;- paste(&quot;p =&quot;, p_round) return(p_string) } 1.4.3 Imports You need to &quot;import&quot; any packages you used in your function by running usethis::use_package for each package you want to include. usethis::use_package(&quot;stringr&quot;) You can't import the whole tidyverse, but you can import each package separately (i.e., ggplot2, purrr, tibble, dplyr, tidyr, stringr, readr, forcats). Import just the packages you actually need. If you use pipes (even if you've imported dplyr), you also need to run usethis::use_pipe(). It will add a file called utils-pipe.R to your R directory and add magrittr to your Imports. 1.4.4 Documentation Now edit the commented part before your function. The #' is special to roxygen2 documentation, which we'll enable below. This generates what you see in the Help viewer. Type ?mean into the console pane and have a look at the Help pane. The first line is the name of the function in title case The Description is the lines between the title and first @param The Useage is automatically generated The Arguments section is generated from the list of @paramargument Argument description... The Value section is the text after @return The Examples section is the text under @examples This block should end with @export to make sure your function is added to your package Edit the documentation for your report_p function. Save your file in the R directory with the name report_p.R. For now, we'll make a separate file for each function and give it the name of the function. Roxygen creates automatic documentation. You enable it with the following command (you only need to run this once per package). usethis::use_roxygen_md() Now you can automatically update the documentation for your package by running devtools::document(), after which you should see the following text. Updating demopckg documentation Writing NAMESPACE Loading demopckg Writing report_p.Rd You don't need to worry about these files, they'll be added to your package to show Help documentation. 1.5 Build your package Now you're ready to check and build your package for installation. 1.5.1 Check First, check everything by running devtools::check(). You'll get a lot of output, but don't worry unless you have an error message. Hopefully, you'll get this message: 0 errors ✔ | 0 warnings ✔ | 0 notes ✔ 1.5.2 Build Next, run devtools::build(). You'll get a message that looks like this: ✔ checking for file ‘/Users/lisad/rproj/demopckg/DESCRIPTION’ ... ─ preparing ‘demopckg’: ✔ checking DESCRIPTION meta-information ... ─ checking for LF line-endings in source and make files and shell scripts ─ checking for empty or unneeded directories ─ building ‘demopckg_0.0.0.9000.tar.gz’ [1] &quot;/Users/lisad/rproj/demopckg_0.0.0.9000.tar.gz&quot; 1.5.3 Install Next, install your new package with the following code (../ means to go up one directory to look for the demopckg install file). devtools::install(&quot;../demopckg&quot;) You'll see a bunch of output that should end in: * DONE (demopckg) 1.5.4 Test To make sure it's all gone well, restart R and try to use the function report_p(0.00039). You should get an error message. Then load your new package with library(demopckg) are retry the example above. Type ?report_p in the console and look at your Help documentation. Restart R and open a new .R or .Rmd file. Load your new package at the top of the file and try using your function in a paragraph that reports the p-value for a test. 1.6 Error checking Try running your function with different values for p. What happens if you use invalid values, like 1.07, -0.05, or &quot;A&quot;? We can add error checking to a function to quit and give a message if the error is fatal, or just warn them if the error is recoverable, but probably wrong. P-values can't ever be less than 0 or greater than 1, so we can just quit and give an error message if that happens. Add the following code to the beginning of your function, rerun the code to update the function, and test it on some values of p that are less than 0 or greater than 1. if (p &lt; 0) stop(&quot;p cannot be less than 0&quot;) if (p &gt; 1) stop(&quot;p cannot be greater than 1&quot;) What other errors do you think people might make? You can add checks to the beginning of your function to warn people if they don't enter reasonable numbers for the digits argument and set digits to the default value so that the code can continue. if (!(digits %in% 1:5)) { warning(&quot;digits should probably be an integer between 1 and 5&quot;) digits = 3 } 1.7 Unit tests Up until now, we've just tested our function in an ad hoc way every time we made changes. We can make this process more formal by using unit tests. These will make sure that your function is working properly if you make any changes. This seems like overkill for simple functions, but is absolutely essential for big projects, so best to get into good habits now. 1.7.1 Setup When you set up a new package, you need to set up the testing structure using usethis::use_testthat(). You only need to do this once for each package and you will know it has been done if a new directory called tests is made. 1.7.2 New unit tests Create a new test file for the report_p function using usethis::use_test(&quot;report_p&quot;). It will create a new file called test-report_p.R in the tests/testhat/ directory. Replace the text in that file with the text below. context(&quot;report_p&quot;) testthat::test_that(&quot;errors&quot;, { testthat::expect_error( report_p(-1), &quot;p cannot be less than 0&quot; ) testthat::expect_error( report_p(2), &quot;p cannot be greater than 1&quot; ) }) The context function lets you know what function you're testing when you run all the unit tests in a package. The test_that function checks a groups of expectataions. The first set we're going to make checks if we get the error messages we expect, so we've called it &quot;errors&quot;. We're going to check two expectations, that we'll get the error message &quot;p cannot be less than 0&quot; if p = -1, and that we'll get the error message &quot;p cannot be greater than 1&quot; id p = 2. You can test more values than these, but we'll start with just these two. After you save this file, run devtools::test(). You should see output like: Loading demopckg Testing demopckg ✔ | OK F W S | Context ✔ | 2 | report_p ══ Results ═══════════════════════════════════════════════════════════ OK: 2 Failed: 0 Warnings: 0 Skipped: 0 Now add another testthat::test_that block called &quot;default values&quot;. Use the function testthat::expect_equal to check if the output of the report_p() function with different p values and the default digits value gives you the expected output. For example: testthat::expect_equal( report_p(p = 0.0222), &quot;p = .022&quot; ) 1.7.3 Run all tests Run devtools::test() after you add each test to make sure your tests work as expected. 1.8 Share your package You can do package development without a GitHub account, but this is one of the easiest ways to share your package. 1.8.1 Git on RStudio If you don't have git installed on your computer, don't have it integrated with RStudio, and/or don't have a github account, follow the instructions in Appendix @ref(#git). 1.8.2 Set up git for this project If you aren't already using version control for this project, make sure all of your files are saved and type usethis::use_git() into the console. Choose Yes to commit and Yes to restart R. 1.8.3 GitHub access token Now set up a github access token with usethis::browse_github_pat(). Your web browser will open and you'll be asked to log into your github account and then asked to authorise a new token. Accept the defaults and click OK at the bottom of the page. Figure 1.1: Authorise a github token so you can create new github repositories from RStudio Copy your token (the blacked-out bit in the image below). Figure 1.2: Copy your github token Type usethis::edit_r_environ() in the RStudio console pane. A new file called .Renviron will appear in the source pane. Add the following line to it (replace &lt;YOUR-TOKEN&gt; with your copied token). GITHUB_PAT=&lt;YOUR-TOKEN&gt; Save and close the file, then restart R. 1.8.4 Make a new GitHub repository Type usethis::use_github(protocol=&quot;https&quot;) into the console window and check that the suggested title and description are OK. ✔ Setting active project to &#39;/Users/lisad/rproj/demopckg&#39; ● Check title and description Name: demopckg Description: Demo Stuff Are title and description ok? 1: No way 2: Yeah 3: No If you choose Yeah, you'll see some messages and your web browser will open the github repsitory page. Figure 1.3: Your new github repository 1.8.5 Install your package from GitHub Install your package using the following code (replacing debruine with your github username). devtools::install_github(&quot;debruine/demopckg&quot;) 1.9 Further resources There is a lot more to learn about package development, including writing vignettes to help users understand your functions and getting your package ready to submit to CRAN. R Packages by Hadley Wickham usethis Workflow for package development by Emil Hvitfeldt 1.9.1 Workflow The following script has all of the functions you'll need to start a new package. pckg &lt;- &quot;mynewpackage&quot; pckgdir &lt;- &quot;~/rproj/&quot; me &lt;- &quot;Lisa DeBruine&quot; # run once at start of package usethis::create_package(paste0(pckgdir, pckg)) usethis::use_mit_license(name = me) usethis::use_readme_rmd() usethis::use_testthat() usethis::use_roxygen_md() usethis::use_pipe() # everyone needs pipes # code for new functions funcname &lt;- &quot;newfunction&quot; imports &lt;- c(&quot;dplyr&quot;, &quot;tidyr&quot;) usethis::edit_file(paste0(&quot;R/&quot;, funcname, &quot;.R&quot;)) usethis::use_test(funcname) for (import in imports) usethis::use_package(import) # building the package devtools::check() # can take a long time devtools::build() devtools::install(paste0(&quot;../&quot;, pckg)) # use these for specific tasks # if check takes too long devtools::document() devtools::test() devtools::run_examples() 1.9.2 The full report_p function Here's what the full function should look like. #&#39; Report p-value #&#39; #&#39; `report_p` reports a p-value. #&#39; #&#39; @param p The p-value #&#39; @param digits The number of digits to round to (default = 3) #&#39; #&#39; @return A string with the format &quot;p = .040&quot; or &quot;p &lt; .001&quot; #&#39; @examples #&#39; #&#39; report_p(0.02018) # returns &quot;p = .020&quot; #&#39; report_p(0.00028) # returns &quot;p &lt; .001&quot; #&#39; #&#39; @export report_p &lt;- function(p, digits = 3) { if (p &lt; 0) stop(&quot;p cannot be less than 0&quot;) if (p &gt; 1) stop(&quot;p cannot be greater than 1&quot;) if (digits &lt; 1) { warning(&quot;digits should probably be an integer between 1 and 5&quot;) digits = 3 } if (p &lt; .001) return(&quot;p &lt; .001&quot;) p_round &lt;- round(p, digits) %&gt;% as.character() %&gt;% # omit leading zero for APA-style stringr::str_replace(&quot;0.&quot;, &quot;.&quot;) %&gt;% # pad right with zeros stringr::str_pad(digits+1, &quot;right&quot;, 0) p_string &lt;- paste(&quot;p =&quot;, p_round) return(p_string) } "],
["installing-r.html", "A Installing R A.1 Installing Base R A.2 Installing RStudio A.3 Installing LaTeX", " A Installing R Installing R and RStudio is usually straightforward. The sections below explain how and there is a helpful YouTube video here. A.1 Installing Base R Install base R from https://cran.rstudio.com/. Choose the download link for your operating system (Linux, Mac OS X, or Windows). If you have a Mac, install the latest release from the newest R-x.x.x.pkg link (or a legacy version if you have an older operating system). After you install R, you should also install XQuartz to be able to use some visualisation packages. If you are installing the Windows version, choose the &quot;base&quot; subdirectory and click on the download link at the top of the page. After you install R, you should also install RTools; use the &quot;recommended&quot; version highlighted near the top of the list. If you are using Linux, choose your specific operating system and follow the installation instructions. A.2 Installing RStudio Go to rstudio.com and download the RStudio Desktop (Open Source License) version for your operating system under the list titled Installers for Supported Platforms. A.3 Installing LaTeX You can install the LaTeX typesetting system to produce PDF reports from RStudio. Without this additional installation, you will be able to produce reports in HTML but not PDF. To generate PDF reports, you will additionally need: pandoc, and LaTeX, a typesetting language, available for WINDOWS: MikTeX Mac OS: MacTex (3.2GB download) or BasicTeX (78MB download, but should work fine) Linux: TeX Live "],
["git-and-github.html", "B Git and GitHub B.1 Get a GitHub account B.2 Set up RStudio B.3 Set your GitHub info B.4 Create an SSH Key on RStudio B.5 Create an SSH Key on GitHub", " B Git and GitHub There are many reasons to use version control. Git is one option and it is well-integrated into RStudio. GitHub is a free service to store your version controlled projects in the cloud and (optionally) share them with others. B.1 Get a GitHub account Go to GitHub and create a new account. Make sure your username is professional Use an email address that you won't lose access to (e.g., gmail) B.2 Set up RStudio If you are a UofG INP staff/student, you can access the Glasgow Psychology RStudio site and skip to Set your GitHub info. If you are working from your own computer, follow the next 2 sub-steps: B.2.1 Install git You can check if git is already installed on your computer by going to Shell... under the Tools menu (or just open a terminal window) and typing which git. If you get an answer like /usr/local/bin/git then git is already installed. If not, install git and then use which git to check where it is installed. B.2.2 Enable version control in RStudio Go to Global Options... from the Tools menu and set the location of your git executable to the location from the previous step. Figure B.1: Set the location of git B.3 Set your GitHub info Run usethis::edit_git_config() in the console pane; it will open a file called .gitconfig. Replace GITHUB_EMAIL with the email address you used for github and GITHUB_USERNAME with your github username. [user] email = GITHUB_EMAIL name = GITHUB_USERNAME You can skip the rest of the steps if you are using your own computer because you can use https to access github. If you are using an RStudio server or just want to use SSH, follow the steps below. B.4 Create an SSH Key on RStudio Go to Global Options... from the Tools menu Click Create RSA Key... and enter a passphrase Figure B.2: Global options Click on View public key and copy the contents of the box B.5 Create an SSH Key on GitHub Go to GitHub &gt; Settings &gt; SSH and GPG keys Click New SSH Key Put RStudio server as the title (or My Computer Name if on your own computer) Paste your public key into the Key box Click Add SSH key Figure B.3: Add SSH key "],
["pipes.html", "C Pipes", " C Pipes Pipes are a way to order your code in a more readable format. Let's say you have a small data table with 10 participant IDs, two columns with variable type A, and 2 columns with variable type B. You want to calculate the mean of the A variables and the mean of the B variables and return a table with 10 rows (1 for each participant) and 3 columns (id, A_mean and B_mean). One way you could do this is by creating a new object at every step and using that object in the next step. This is pretty clear, but you've created 6 unnecessary data objects in your environment. This can get confusing in very long scripts. library(tidyverse) # make a data table with 10 subjects data_original &lt;- tibble( id = 1:10, A1 = rnorm(10, 0), A2 = rnorm(10, 1), B1 = rnorm(10, 2), B2 = rnorm(10, 3) ) # gather columns A1 to B2 into &quot;variable&quot; and &quot;value&quot; columns data_gathered &lt;- gather(data_original, variable, value, A1:B2) # separate the variable column at the _ into &quot;var&quot; and &quot;var_n&quot; columns data_separated &lt;- separate(data_gathered, variable, c(&quot;var&quot;, &quot;var_n&quot;), sep = 1) # group the data by id and var data_grouped &lt;- group_by(data_separated, id, var) # calculate the mean value for each id/var data_summarised &lt;- summarise(data_grouped, mean = mean(value)) # spread the mean column into A and B columns data_spread &lt;- spread(data_summarised, var, mean) # rename A and B to A_mean and B_mean data &lt;- rename(data_spread, A_mean = A, B_mean = B) id A_mean B_mean 1 0.9585017 2.684452 2 -0.2125097 2.196549 3 0.3489359 2.780172 4 0.5750035 2.386987 5 0.6529032 1.619843 6 -0.0220717 4.399226 7 0.2176857 2.924193 8 0.4685585 3.435118 9 0.3861693 2.906224 10 -0.8428839 2.737249 You can name each object data and keep replacing the old data object with the new one at each step. This will keep you environment clean, but I don't recommend it because it makes it too easy to accidentally run your code out of order when you are running line-by-line for development or debugging. One way to avoid extra objects is to nest your functions, literally replacing each data object with the code that generated it in the previous step. This can be fine for very short chains. mean_petal_width &lt;- round(mean(iris$Petal.Width), 2) But it gets extremely confusing for long chains: # do not ever do this!! data &lt;- rename( spread( summarise( group_by( separate( gather( tibble( id = 1:10, A1 = rnorm(10, 0), A2 = rnorm(10, 1), B1 = rnorm(10, 2), B2 = rnorm(10, 3)), variable, value, A1:B2), variable, c(&quot;var&quot;, &quot;var_n&quot;), sep = 1), id, var), mean = mean(value)), var, mean), A_mean = A, B_mean = B) The pipe lets you &quot;pipe&quot; the result of each function into the next function, allowing you to put your code in a logical order without creating too many extra objects. # calculate mean of A and B variables for each participant data &lt;- tibble( id = 1:10, A1 = rnorm(10, 0), A2 = rnorm(10, 1), B1 = rnorm(10, 2), B2 = rnorm(10, 3) ) %&gt;% gather(variable, value, A1:B2) %&gt;% separate(variable, c(&quot;var&quot;, &quot;var_n&quot;), sep=1) %&gt;% group_by(id, var) %&gt;% summarise(mean = mean(value)) %&gt;% spread(var, mean) %&gt;% rename(A_mean = A, B_mean = B) You can read this code from top to bottom as follows: Make a tibble called data with id of 1 to 10, A1 of 10 random numbers from a normal distribution with a mean of 0, A2 of 10 random numbers from a normal distribution with a mean of 1, B1 of 10 random numbers from a normal distribution with a mean of 2, B2 of 10 random numbers from a normal distribution with a mean of 3; and then Gather to create variable and value column from columns A_1 to B_2; and then Separate the column variable into 2 new columns called varand var_n, separate at character 1; and then Group by columns id and var; and then Summarise and new column called mean as the mean of the value column for each group; and then Spread to make new columns with the key names in var and values in mean; and then Rename to make columns called A_mean (old A) and B_mean (old B) You can make intermediate objects whenever you need to break up your code because it's getting too complicated or you need to debug something. You can debug a pipe by running just the first few functions by highlighting from the beginning to just before the pipe you want to stop at. Try this by highlighting from data &lt;- to the end of the separate function and typing cmd-return. What does data look like now? "],
["symbols.html", "D Symbols", " D Symbols Symbol psyTeachR Term Also Known As () (round) brackets parentheses [] square brackets brackets {} curly brackets squiggly brackets &lt;&gt; chevrons angled brackets / guillemets &lt; less than &gt; greater than &amp; ampersand &quot;and&quot; symbol # hash pound / octothorpe / slash forward slash \\ backslash - dash hyphen / minus _ underscore * asterisk star ^ caret power symbol ~ tilde twiddle / squiggle = equal sign == double equal sign . full stop period / point ! exclamation mark bang / not ? question mark ' single quote quote / apostrophe &quot; double quote quote %&gt;% pipe magrittr pipe | vertical bar pipe , comma ; semi-colon : colon @ &quot;at&quot; symbol various hilarious regional terms "]
]
