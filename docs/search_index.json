[
["index.html", "Tutorials Overview", " Tutorials Lisa DeBruine 2019-03-23 Overview I'm going to move all of my code tutorials here eventually. "],
["your-first-r-package-with-unit-tests.html", "Chapter 1 Your first R package with unit tests 1.1 Learning Objectives 1.2 Resources 1.3 Setting Up 1.4 Create your R package 1.5 Creating a function 1.6 Build your package 1.7 Error checking 1.8 Unit tests 1.9 Share your package 1.10 The full report_p function", " Chapter 1 Your first R package with unit tests 1.1 Learning Objectives Create an R package Create a function Document the function Include error checking in the function Write unit tests for the function Use your package in a script Share your package through GitHub 1.2 Resources R Packages by Hadley Wickham usethis by Jenny Bryan 1.3 Setting Up You will need to install the following packages: install.packages(c(&quot;devtools&quot;, &quot;roxygen2&quot;, &quot;testthat&quot;, &quot;usethis&quot;, &quot;knitr&quot;)) 1.4 Create your R package Use the following command to create the framework for a new package called demopckg. Set the argment to the path where you want to save your package. The last section of the path should be the name of the package. usethis::create_package(&quot;~/rstuff/demopckg&quot;) Package names can only be letters, numbers, and full stops. You'll see the following output, and a new RStudio project will open up. You can close the old window now and just work in this project. ✔ Setting active project to &#39;~/rstuff/demopckg&#39; ✔ Creating &#39;R/&#39; ✔ Creating &#39;man/&#39; ✔ Writing &#39;DESCRIPTION&#39; ✔ Writing &#39;NAMESPACE&#39; ✔ Writing &#39;demopckg.Rproj&#39; ✔ Adding &#39;.Rproj.user&#39; to &#39;.gitignore&#39; ✔ Adding &#39;^demopckg\\\\.Rproj$&#39;, &#39;^\\\\.Rproj\\\\.user$&#39; to &#39;.Rbuildignore&#39; ✔ Opening new project &#39;demopckg&#39; in RStudio 1.4.1 Edit the DESCRIPTION file Open the DESCRIPTION file. It should look like this: Package: demopckg Title: What the Package Does (One Line, Title Case) Version: 0.0.0.9000 Authors@R: person(given = &quot;First&quot;, family = &quot;Last&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), email = &quot;first.last@example.com&quot;) Description: What the package does (one paragraph). License: What license it uses Encoding: UTF-8 LazyData: true Change the title, authors, and description to your own information. 1.4.2 Create a LICENSE Add a license using one of the following options: usethis::use_mit_license(name = &quot;YOUR NAME&quot;) # permissive sharing usethis::use_cc0_license(name = &quot;YOUR NAME&quot;) # public domain - use for data packages usethis::use_gpl3_license(name = &quot;YOUR NAME&quot;) # derivatives must be open 1.4.3 Create a README Use the following code to set up a README document that will explain your package. usethis::use_readme_rmd() We'll eventually put this on github, so change the installation instructions to the following (change yourusername to your github username). Delete the example for now. You can install the released version of demopckg from [GitHub](https://github.com) with: &amp;#96;&amp;#96;&amp;#96; r devtools::install_github(&quot;yourusername/demopckg&quot;) &amp;#96;&amp;#96;&amp;#96; 1.5 Creating a function Create a new R script from the File menu (New File &gt; R Script). Paste the following template into your file: #&#39; My function #&#39; #&#39; `myfunction` does something. #&#39; #&#39; @param arg1 The first argument #&#39; @return \\code{arg1} #&#39; @examples #&#39; #&#39; myfunction(1) # returns 1 #&#39; #&#39; @export myfunction &lt;- function(arg1) { arg1 } We're going to create a function that reports a p-value in APA style, named report_p. It will take two arguments, the p-value (p) and the number of digits to round to (digits). Replace myfunction with report_p and change the arguments. Should p have a default value? Should digits? The first thing we should do in the function is check whether p is less than 0.001, and if it is, return the value &quot;p &lt; .001&quot;. report_p &lt;- function(p, digits = 3) { if (p &lt; .001) return(&quot;p &lt; .001&quot;) } Once you run the return() function, your function stops running. If p is greater than 0.001, then we should round it to the specified number of digits, paste it after the string &quot;p = &quot;, and return it. report_p &lt;- function(p, digits = 3) { if (p &lt; .001) return(&quot;p &lt; .001&quot;) round_p &lt;- round(p, digits) p_string &lt;- paste(&quot;p =&quot;, p_round) return(p_string) } Run your function and test it with a few different p-values and digits. Try report_p(0.01034). Does this look exactly like you expect? APA style omits the leading zero and pads the number out to three digits. We can do this by converting our rounded p-value into a character string, replacing the string &quot;0.&quot; with &quot;.&quot;, and making sure to pad the right side with enough zeros. The stringr package has useful functions for this. report_p &lt;- function(p, digits = 3) { if (p &lt; .001) return(&quot;p &lt; .001&quot;) p_round &lt;- round(p, digits) %&gt;% as.character() %&gt;% # omit leading zero for APA-style stringr::str_replace(&quot;0.&quot;, &quot;.&quot;) %&gt;% # pad right with zeros stringr::str_pad(digits+1, &quot;right&quot;, 0) p_string &lt;- paste(&quot;p =&quot;, p_round) return(p_string) } 1.5.1 Documentation Now edit the commented part before your function. The #' is special to roxygen2 documentation, which we'll enable below. This generates what you see in the Help viewer. Type ?mean into the console pane and have a look at the Help pane. The first line is the name of the function in title case The Description is the lines between the title and first @param The Useage is automatically generated The Arguments section is generated from the list of @paramargument Argument description... The Value section is the text after @return The Examples section is the text under @examples This block should end with @export to make sure your function is added to your package Edit the documentation for your report_p function. Save your file in the R directory with the name report_p.R. For now, we'll make a separate file for each function and give it the name of the function. Roxygen creates automatic documentation. You enable it with the following command (you only need to run this once per package). usethis::use_roxygen_md() Now you can automatically update the documentation for your package by running devtools::document(), after which you should see the following text. Updating demopckg documentation Writing NAMESPACE Loading demopckg Writing report_p.Rd You don't need to worry about these files, they'll be added to your package to show Help documentation. 1.5.2 Imports You need to &quot;import&quot; any packages you used in your function by running usethis::use_package for each package you want to include. usethis::use_package(&quot;stringr&quot;) You can't import the whole tidyverse, but you can import each package separately. Import just the packages you actually need. tidyverse = ggplot2, purrr, tibble, dplyr, tidyr, stringr, readr, forcats If you use pipes (even if you've imported dplyr), you also need to run usethis::use_pipe(). It will add a file called utils-pipe.R to your R directory and add magrittr to your Imports. 1.6 Build your package Now you're ready to check and build your package for installation. 1.6.1 Check First, check everything by running devtools::check(). You'll get a lot of output, but don't worry unless you have an error message. Hopefully, you'll get this message: 0 errors ✔ | 0 warnings ✔ | 0 notes ✔ 1.6.2 Build Next, run devtools::build(). You'll get a message that looks like this: ✔ checking for file ‘/Users/lisad/rproj/demopckg/DESCRIPTION’ ... ─ preparing ‘demopckg’: ✔ checking DESCRIPTION meta-information ... ─ checking for LF line-endings in source and make files and shell scripts ─ checking for empty or unneeded directories ─ building ‘demopckg_0.0.0.9000.tar.gz’ [1] &quot;/Users/lisad/rproj/demopckg_0.0.0.9000.tar.gz&quot; 1.6.3 Install Next, install your new package with the following code (../ means to go up one directory to look for the demopckg install file). devtools::install(&quot;../demopckg&quot;) You'll see a bunch of output that should end in: * DONE (demopckg) 1.6.4 Test To make sure it's all gone well, restart R and try to use the function report_p(0.00039). You should get an error message. Then load your new package with library(demopckg) are retry the example above. Type ?report_p in the console and look at your Help documentation. Restart R and open a new .R or .Rmd file. Load your new package at the top of the file and try using your function in a paragraph that reports the p-value for a test. 1.7 Error checking Try running your function with different values for p. What happens if you use invalid values, like 1.07, -0.05, or &quot;A&quot;? We can add error checking to a function to quit and give a message if the error is fatal, or just warn them if the error is recoverable, but probably wrong. P-values can't ever be less than 0 or greater than 1, so we can just quit and give an error message if that happens. Add the following code to the beginning of your function, rerun the code to update the function, and test it on some values of p that are less than 0 or greater than 1. if (p &lt; 0) stop(&quot;p cannot be less than 0&quot;) if (p &gt; 1) stop(&quot;p cannot be greater than 1&quot;) What other errors do you think people might make? You can add checks to the beginning of your function to warn people if they don't enter reasonable numbers for the digits argument and set digits to the default value so that the code can continue. if (!(digits %in% 1:5)) { warning(&quot;digits should probably be an integer between 1 and 5&quot;) digits = 3 } 1.8 Unit tests Up until now, we've just tested our function in an ad hoc way every time we made changes. We can make this process more formal by using unit tests. These will make sure that your function is working properly if you make any changes. This seems like overkill for simple functions, but is absolutely essential for big projects, so best to get into good habits now. 1.8.1 Setup When you set up a new package, you need to set up the testing structure using usethis::use_testthat(). You only need to do this once for each package and you will know it has been done if a new directory called tests is made. 1.8.2 New unit tests Create a new .R file and save it as test-report_p.R in the /tests/testthat/ directory. Copy the following text into the file: context(&quot;report_p&quot;) testthat::test_that(&quot;errors&quot;, { testthat::expect_error( report_p(-1), &quot;p cannot be less than 0&quot; ) testthat::expect_error( report_p(2), &quot;p cannot be greater than 1&quot; ) }) The context function lets you know what function you're testing when you run all the unit tests in a package. The test_that function checks a groups of expectataions. The first set we're going to make checks if we get the error messages we expect, so we've called it &quot;errors&quot;. We're going to check two expectations, that we'll get the error message &quot;p cannot be less than 0&quot; if p = -1, and that we'll get the error message &quot;p cannot be greater than 1&quot; id p = 2. You can test more values than these, but we'll start with just these two. After you save this file, run devtools::test(). You should see output like: Loading demopckg Testing demopckg ✔ | OK F W S | Context ✔ | 2 | report_p ══ Results ═══════════════════════════════════════════════════════════ OK: 2 Failed: 0 Warnings: 0 Skipped: 0 Now add another testthat::test_that block called &quot;default values&quot;. Use the function testthat::expect_equal to check if the output of the report_p() function with different p values and the default digits value gives you the expected output. For example: testthat::expect_equal( report_p(p = 0.0222), &quot;p = .022&quot; ) Run devtools::test() after you add each test to make sure your tests work as expected. 1.9 Share your package You can do package development without a GitHub account, but this is one of the easiest ways to share your package. 1.9.1 Set up git for this project If you aren't already using version control for this project, make sure all of your files are saved and type usethis::use_git() into the console. Choose Yes to commit and Yes to restart R. 1.9.2 GitHub access token Now set up a github access token with usethis::browse_github_pat(). Your web browser will open and you'll be asked to log into your github account and then asked to authorise a new token. Accept the defaults and click OK at the bottom of the page. Figure 1.1: Authorise a github token so you can create new github repositories from RStudio Copy your token (the blacked-out bit in the image below). Figure 1.2: Copy your github token Type usethis::edit_r_environ() in the RStudio console pane. A new file called .Renviron will appear in the source pane. Add the following line to it (replace &lt;YOUR-TOKEN&gt; with your copied token). GITHUB_PAT=&lt;YOUR-TOKEN&gt; Save and close the file, then restart R. 1.9.3 Make a new GitHub repository Type usethis::use_github(protocol=&quot;https&quot;) into the console window and check that the suggested title and description are OK. ✔ Setting active project to &#39;/Users/lisad/rproj/demopckg&#39; ● Check title and description Name: demopckg Description: Demo Stuff Are title and description ok? 1: No way 2: Yeah 3: No If you choose Yeah, you'll see some messages and your web browser will open the github repsitory page. Figure 1.3: Your new github repository 1.9.4 Install your package from GitHub Install your package using the following code (replacing debruine with your github username). devtools::install_github(&quot;debruine/demopckg&quot;) 1.10 The full report_p function Here's what the full function should look like. #&#39; Report p-value #&#39; #&#39; `report_p` reports a p-value. #&#39; #&#39; @param p The p-value #&#39; @param digits The number of digits to round to (default = 3) #&#39; #&#39; @return A string with the format &quot;p = .040&quot; or &quot;p &lt; .001&quot; #&#39; @examples #&#39; #&#39; report_p(0.02018) # returns &quot;p = .020&quot; #&#39; report_p(0.00028) # returns &quot;p &lt; .001&quot; #&#39; #&#39; @export report_p &lt;- function(p, digits = 3) { if (p &lt; 0) stop(&quot;p cannot be less than 0&quot;) if (p &gt; 1) stop(&quot;p cannot be greater than 1&quot;) if (digits &lt; 1) { warning(&quot;digits should probably be an integer between 1 and 5&quot;) digits = 3 } if (p &lt; .001) return(&quot;p &lt; .001&quot;) p_round &lt;- round(p, digits) %&gt;% as.character() %&gt;% # omit leading zero for APA-style stringr::str_replace(&quot;0.&quot;, &quot;.&quot;) %&gt;% # pad right with zeros stringr::str_pad(digits+1, &quot;right&quot;, 0) p_string &lt;- paste(&quot;p =&quot;, p_round) return(p_string) } "]
]
