[
["index.html", "Tutorials Overview", " Tutorials Lisa DeBruine 2019-03-20 Overview I'm going to move all of my code tutorials here eventually. "],
["your-first-r-package-with-unit-tests.html", "Chapter 1 Your first R package with unit tests 1.1 Learning Objectives 1.2 Resources 1.3 Setting Up 1.4 Create your R package 1.5 Creating a function 1.6 Documentation 1.7 Error checking 1.8 Unit tests 1.9 Automatic checks 1.10 Use your package in a script 1.11 Share your package", " Chapter 1 Your first R package with unit tests This page is under construction 1.1 Learning Objectives Create an R package Create a function Document the function Include error checking in the function Write unit tests for the function Run automatic checks on your package Use your package in a script 1.2 Resources R Packages by Hadley Wickham 1.3 Setting Up You will need to install the following packages: install.packages(c(&quot;devtools&quot;, &quot;roxygen2&quot;, &quot;testthat&quot;, &quot;usethis&quot;, &quot;knitr&quot;)) 1.4 Create your R package Use the following command to create the framework for a new package called demopckg. Set the argment to the path where you want to save your package. The last section of the path should be the name of the package. usethis::create_package(&quot;~/rstuff/demopckg&quot;) Package names can only be letters, numbers, and full stops. You'll see the following output, and a new RStudio project will open up. You can close the old window now and just work in this project. ✔ Setting active project to &#39;~/rstuff/demopckg&#39; ✔ Creating &#39;R/&#39; ✔ Creating &#39;man/&#39; ✔ Writing &#39;DESCRIPTION&#39; ✔ Writing &#39;NAMESPACE&#39; ✔ Writing &#39;demopckg.Rproj&#39; ✔ Adding &#39;.Rproj.user&#39; to &#39;.gitignore&#39; ✔ Adding &#39;^demopckg\\\\.Rproj$&#39;, &#39;^\\\\.Rproj\\\\.user$&#39; to &#39;.Rbuildignore&#39; ✔ Opening new project &#39;demopckg&#39; in RStudio 1.4.1 Edit the DESCRIPTION file Open the DESCRIPTION file. It should look like this: Package: demopckg Title: What the Package Does (One Line, Title Case) Version: 0.0.0.9000 Authors@R: person(given = &quot;First&quot;, family = &quot;Last&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), email = &quot;first.last@example.com&quot;) Description: What the package does (one paragraph). License: What license it uses Encoding: UTF-8 LazyData: true Change the title, authors, and description to your own information. 1.4.2 Create a LICENSE Add a license using one of the following options: usethis::use_mit_license(name = &quot;YOUR NAME&quot;) # permissive sharing usethis::use_cc0_license(name = &quot;YOUR NAME&quot;) # public domain - use for data packages usethis::use_gpl3_license(name = &quot;YOUR NAME&quot;) # derivatives must be open 1.5 Creating a function Create a new R script from the File menu (New File &gt; R Script). Paste the following template into your file: #&#39; My function. #&#39; #&#39; `myfunction` does something. #&#39; #&#39; @param arg1 The first argument #&#39; @return \\code{arg1} #&#39; @examples #&#39; #&#39; myfunction(1) # returns 1 #&#39; myfunction &lt;- function(arg1) { arg1 } We're going to create a function that reports a p-value in APA style, named report_p. It will take two arguments, the p-value (p) and the number of digits to round to (digits). Replace myfunction with report_p and change the arguments. Should p have a default value? Should digits? The first thing we should do in the function is check whether p is less than 0.001, and if it is, return the value &quot;p &lt; .001&quot;. report_p &lt;- function(p, digits = 3) { if (p &lt; .001) return(&quot;p &lt; .001&quot;) } Once you run the return() function, your function stops running. If p is greater than 0.001, then we should round it to the specified number of digits, paste it into the string &quot;p = ?&quot;, and return it. report_p &lt;- function(p, digits = 3) { if (p &lt; .001) return(&quot;p &lt; .001&quot;) round_p &lt;- round(p, digits) p_string &lt;- paste(&quot;p =&quot;, p_round) return(p_string) } Run your function and test it with a few different p-values and digits. Try report_p(0.01034). Does this look exactly like you expect? APA style omits the leading zero and pads the number out to three digits. We can do this by converting our rounded p-value into a character report_p &lt;- function(p, digits = 3) { if (p &lt; .001) return(&quot;p &lt; .001&quot;) p_round &lt;- round(p, digits) %&gt;% as.character() %&gt;% # omit leading zero for APA-style stringr::str_replace(&quot;0.&quot;, &quot;.&quot;) %&gt;% # pad right with zeros stringr::str_pad(digits+1, &quot;right&quot;, 0) p_string &lt;- paste(&quot;p =&quot;, p_round) return(p_string) } 1.5.1 report_p function #&#39; Report p-value. #&#39; #&#39; `report_p` reports a p-value. #&#39; #&#39; @param p The p-value #&#39; @param digits The number of digits to round to (default = 3) #&#39; #&#39; @return A string with the format &quot;p = .040&quot; or &quot;p &lt; .001&quot; #&#39; @examples #&#39; report_p(0.02018) # returns &quot;p = .020&quot; #&#39; report_p(0.00028) # returns &quot;p &lt; .001&quot; #&#39; report_p &lt;- function(p, digits = 3) { if (p &lt; .001) return(&quot;p &lt; .001&quot;) p_round &lt;- round(p, digits) %&gt;% as.character() %&gt;% # omit leading zero for APA-style stringr::str_replace(&quot;0.&quot;, &quot;.&quot;) %&gt;% # pad right with zeros stringr::str_pad(digits+1, &quot;right&quot;, 0) p_string &lt;- paste(&quot;p =&quot;, p_round) return(p_string) } 1.5.2 Imports You can &quot;import&quot; any packages you used in your function by running usethis::use_package for each package you want to include. usethis::use_package(&quot;stringr&quot;) You can't import the whole tidyverse, but you can import each package separately. Import just the packages you actually need. tidyverse = ggplot2, purrr, tibble, dplyr, tidyr, stringr, readr, forcats If you use pipes (even if you've imported dplyr), you also need to run usethis::use_pipe(). 1.6 Documentation Roxygen creates automatic documentation. You enable it with the following command: usethis::use_roxygen_md() 1.7 Error checking 1.8 Unit tests 1.9 Automatic checks 1.10 Use your package in a script 1.11 Share your package You can do package development without a GitHub account, but this is one of the easiest ways to share your package. "]
]
